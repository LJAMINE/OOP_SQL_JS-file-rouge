-- -- Create database
-- CREATE DATABASE ecommerce_exercise;
-- USE ecommerce_exercise;

-- -- Create tables
-- CREATE TABLE customers (
--     customer_id INT AUTO_INCREMENT PRIMARY KEY,
--     first_name VARCHAR(50) NOT NULL,
--     last_name VARCHAR(50) NOT NULL,
--     email VARCHAR(100) UNIQUE,
--     join_date DATE NOT NULL,
--     country VARCHAR(50)
-- );

-- CREATE TABLE products (
--     product_id INT AUTO_INCREMENT PRIMARY KEY,
--     product_name VARCHAR(100) NOT NULL,
--     category VARCHAR(50) NOT NULL,
--     price DECIMAL(10,2) NOT NULL,
--     stock_quantity INT NOT NULL DEFAULT 0
-- );

-- CREATE TABLE orders (
--     order_id INT AUTO_INCREMENT PRIMARY KEY,
--     customer_id INT NOT NULL,
--     order_date DATETIME NOT NULL,
--     status VARCHAR(20) NOT NULL,
--     FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
-- );

-- CREATE TABLE order_items (
--     item_id INT AUTO_INCREMENT PRIMARY KEY,
--     order_id INT NOT NULL,
--     product_id INT NOT NULL,
--     quantity INT NOT NULL,
--     unit_price DECIMAL(10,2) NOT NULL,
--     FOREIGN KEY (order_id) REFERENCES orders(order_id),
--     FOREIGN KEY (product_id) REFERENCES products(product_id)
-- );


-- -- Insert customers
-- INSERT INTO customers (first_name, last_name, email, join_date, country) VALUES
-- ('John', 'Doe', 'john.doe@example.com', '2022-01-15', 'USA'),
-- ('Jane', 'Smith', 'jane.smith@example.com', '2022-02-20', 'Canada'),
-- ('Robert', 'Johnson', 'robert.j@example.com', '2022-03-10', 'UK'),
-- ('Emily', 'Davis', 'emily.d@example.com', '2022-04-05', 'Australia'),
-- ('Michael', 'Brown', 'michael.b@example.com', '2022-05-12', 'USA');

-- -- Insert products
-- INSERT INTO products (product_name, category, price, stock_quantity) VALUES
-- ('Laptop', 'Electronics', 999.99, 50),
-- ('Smartphone', 'Electronics', 699.99, 100),
-- ('Desk Chair', 'Furniture', 199.99, 30),
-- ('Coffee Table', 'Furniture', 149.99, 25),
-- ('Running Shoes', 'Sports', 89.99, 80),
-- ('Yoga Mat', 'Sports', 29.99, 120),
-- ('Blender', 'Home', 49.99, 60),
-- ('Toaster', 'Home', 39.99, 45);

-- -- Insert orders
-- INSERT INTO orders (customer_id, order_date, status) VALUES
-- (1, '2023-01-10 09:30:00', 'Completed'),
-- (2, '2023-01-15 14:22:00', 'Completed'),
-- (3, '2023-02-05 11:10:00', 'Shipped'),
-- (1, '2023-02-18 16:45:00', 'Processing'),
-- (4, '2023-03-02 10:15:00', 'Completed'),
-- (5, '2023-03-10 13:30:00', 'Cancelled'),
-- (2, '2023-03-15 09:05:00', 'Completed');

-- -- Insert order items
-- INSERT INTO order_items (order_id, product_id, quantity, unit_price) VALUES
-- (1, 1, 1, 999.99),
-- (1, 3, 2, 189.99),
-- (2, 2, 1, 699.99),
-- (2, 5, 1, 89.99),
-- (3, 4, 1, 149.99),
-- (3, 6, 2, 27.99),
-- (4, 7, 1, 49.99),
-- (4, 8, 1, 39.99),
-- (5, 1, 1, 950.00),
-- (5, 2, 1, 650.00),
-- (6, 3, 1, 199.99),
-- (7, 5, 2, 85.00),
-- (7, 6, 1, 29.99);







-- -- List all products with prices over $100, sorted by price (highest first)

-- SELECT * FROM `products` WHERE price>100 ORDER BY price DESC;


-- -- Show the total number of products in each category

-- SELECT COUNT(*),category
-- FROM `products`
-- GROUP BY category;

-- -- Calculate the average price of products in each category

-- SELECT AVG(price),category FROM `products` GROUP BY category;

-- -- Display all completed orders with customer names and order dates

-- SELECT c.first_name,o.order_date 
-- FROM `orders` o 
-- INNER JOIN customers c ON c.customer_id=o.customer_id 
-- WHERE o.status="completed";

-- -- List all products that have never been ordered

-- SELECT *
-- FROM products p
-- LEFT JOIN order_items oi ON p.product_id = oi.product_id
-- WHERE oi.product_id IS null;

-- -- 4. Advanced Aggregation


-- -- Find customers who have spent more than $1000 in total

-- SELECT 
--     c.customer_id,
--     c.first_name,
--     c.last_name,
--     SUM(oi.quantity * oi.unit_price) as total_spent
-- FROM customers c
-- INNER JOIN orders o ON o.customer_id = c.customer_id
-- INNER JOIN order_items oi ON oi.order_id = o.order_id
-- GROUP BY c.customer_id, c.first_name, c.last_name
-- HAVING total_spent > 1000;

-- -- Show the total revenue generated by each product category

-- SELECT p.category, SUM(oi.unit_price)as tot 
-- FROM products p 
-- INNER JOIN order_items oi ON oi.product_id=p.product_id 
-- INNER JOIN orders o ON o.order_id=oi.order_id 
-- GROUP BY p.category;




-- -- 5. Complex Queries

-- -- Find the most popular product (most ordered by quantity)
-- SELECT p.product_name, COUNT(oi.quantity)as maximum
-- FROM products p 
-- INNER JOIN order_items oi ON oi.product_id=p.product_id
-- GROUP BY p.product_name
-- ORDER BY maximum DESC;
-- -- Identify customers who haven't placed any orders in 2023


-- -- 6. Date Operations

-- -- Calculate the total sales for each month in 2023

-- -- Find customers who joined more than 6 months ago but haven't placed any orders